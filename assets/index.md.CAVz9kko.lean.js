import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.gcEsvDLe.js";const g=JSON.parse(`{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"&micro;-parser","text":"TypeScript-first parser combinators","tagline":"Build type-safe parsers that validate unknown data and transform it into well-typed objects","actions":[{"theme":"brand","text":"Get Started","link":"/guide/getting-started"},{"theme":"alt","text":"API Reference","link":"/api/"}]},"features":[{"title":"🔒 Type-safe","details":"Full TypeScript support with automatic type inference. Know exactly what types you're working with at compile time."},{"title":"🧩 Composable","details":"Build complex parsers from simple, reusable components using functional composition patterns."},{"title":"🐛 Detailed Errors","details":"Get precise error reporting with full path information to quickly identify and fix parsing issues."},{"title":"🎯 Functional","details":"Clean monadic interface with map, andThen, orElse methods for elegant parser composition."},{"title":"🔄 Circular Detection","details":"Automatic detection of circular references prevents infinite loops in recursive data structures."},{"title":"⚡ Zero Dependencies","details":"Lightweight library with no external dependencies, perfect for any TypeScript project."}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}`),h={name:"index.md"};function p(k,s,l,e,r,E){return n(),a("div",null,s[0]||(s[0]=[t("",2)]))}const y=i(h,[["render",p]]);export{g as __pageData,y as default};
